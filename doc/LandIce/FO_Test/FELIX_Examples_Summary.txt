input_fo_dome.xml 
   description: First order Stokes flow model of a spreading of 
                dome of ice with a circular base and parabolic top.  There is no sliding.
   dofs: u, v, viscosity = Glen
   Domain: The domain from this problem is generated as follows.  
           First take a cylinder of radius 1 centered at (x,y) = (0,0) in the x-y 
           plane having height 1 in the z-direction.  Then the following 
           transformation is applied: 
              x = 0.7071*30*x; 
              y = 0.7071*30*y; 
              z = s*z where s = 0.7071*sqrt(450-x^2-y^2)/sqrt(450)
           The result is a dome-shaped mesh having radius approximately 21 km and
           height approximately 0.7071 km. The top surface is given by the
           expression s above; the basal surface is given by z = 0.   
   Mesh: The cylinder of radius 1, height 1 
         is meshed using CUBIT, so an exodus mesh is required for this problem
         (dome_cyl.exo).  The journal file that generates this exodus mesh is
         dome_cyl.jou. 
   BCs: No-sliding (same as no-slip) at the basal boundary.
        Stree-free at the top boundary.
        Lateral BCs: u=v=0.
   Other parameters: 
     A and n (Glen's law params): same as ISMIP-HOM test cases
     rho = 910 kg/m^3 (ice density)
     g = 9.8 m/s^2 (gravitational constant)

input_fo_dome_interpSurf.xml
   Same as input_fo_dome.xml except the source terms are evaluated 
   by interpolating s(x,y) and b(x,y) from nodal values using Intrepid, rather 
   than hard-coding the exact analytic derivatives of these functions. 

input_fo_domeAnalysis.xml
   This problem is intended to be run with the AlbanyAnalysis executable for
   UQ runs using DAKOTA. All the problem spects are the same as input_fo_dome.xml except the basal
   boundary condition.  Instead of no-sliding (no-slip) at the basal boundary,
   the basal sliding BC: 
       2*mu*epsilon_i.n = beta(x,y)*u_i 
   where 
   beta(x,y) = alpha + beta1*x + beta2*y + beta3*sqrt(x*x+y*y)
   Here, alpha, beta1, beta2, and beta3 are parameters that can be given a 
   distribution in dakota.in.  
   Remark: to actually do the run, make sure you build the AlbanyAnalysis
   executable (and have built Trilinos with DAKOTA enabled), and run the input 
   file with this executable rather than just the Albany executable.  

input_fo_confinedShelf.xml
   dofs: u, v
   equations: first order model 
   viscosity = Glen's law, with A = 5.7e-6 (units consistent with velocity in
   m/a, mesh in km)
   Omega = (0,200)x(0,200)x(-0.44,0.06) (in km)
   BCs: homogeneous Neumann at z=const surfaces
        homoteneous Dirichlet at x=constant and y=200 boundaries
        open-ocean boundary condition at y=0 (south boundary):
        2*mu*epsilon_2.n = rho_(ice)*g*(s-z) - rho*g*(-z)
        where rho_(ice) = 910 kg/m^3
              rho = 0 if z > 0, rho = rho_water = 1028 kg/m^3 if z < 0
              g = 9.8 m/s^2 
              s = 0.06 km
   Remarks: When I ran this problem, I observed that the linear solver 
   was struggling on more than 1 processor if an ILU preconditioner 
   was employed.  An ML preconditioner worked much better.  (IK, 3/15/2013) 

input_fo_confinedShelf_depthIntBC.xml
   This test case is the came as input_fo_confinedShelf.xml but with a
   depth-integrated version of the lateral open-ocean BC at y=0 (south
   boundary): 
        2*mu*epsilon_2.n = 1/2*rho_(ice)*g*h*(1-rho_(ice)/rho_water) = 255.9154
        where rho_(ice) = 910 kg/m^3
              rho_water = 1028 kg/m^3 
              g = 9.8 m/s^2 
              h = 0.5 km
   Remarks: When I ran this problem, I observed that the linear solver 
   was struggling on more than 1 processor if an ILU preconditioner 
   was employed.  An ML preconditioner worked much better.  (IK, 3/15/2013) 

input_fo_cicularShelf.xml
   dofs: u, v
   equations: first order model 
   viscosity = Glen's law, with A = 5.7e-6 (units consistent with velocity in
   m/a, mesh in km)
   Omega = cylinder with radius 22.5 km with height given by -0.88521 < z <
   0.11479 km
   BCs: homogeneous Neumann at z = 0.11479 (top surface)
        open-ocean boundary condition at lateral boundaries:
        2*mu*epsilon_i*n_i = (rho_(ice)*g*(s-z) - rho*g*(-z))*n_i
        where rho_(ice) = 910 kg/m^3
              rho = 0 if z > 0, rho = rho_water = 1028 kg/m^3 if z < 0
              g = 9.8 m/s^2 
              s = 0.11479 km
        u = 0 at center 4 nodes of bottom surface (z=-0.88521) & homogeneous
        Neumann BC at all other nodes on bottom surface (this is set for
        well-posedness and effectively grounds the ice shelf in the center of the
        domain).
    Remarks: The ice shelf in this example is pinned in the middle of the base
    of the cylinder.  Currently, the nodes to be pinned are specified manually 
    in the shelf_cyl.jou file.  If one wishes to use a finer/coarser mesh, 
    currently it is necessary to manually fine what node #s to pin (label node
    on command) and modify the .jou file accordingly. 

