#!/usr/bin/env python

"""
A convenient way to manage and wrap Albany building and
testing, including Trilinos building.
"""

import argparse, sys, os, doctest, socket, re, stat
from subprocess import Popen, PIPE

VERBOSE = False

"""
TODO:
 - Way to provide overrides from the command line?
"""

# Map nodename regex to machine type
MACHINE_NODENAME_MAP = \
{
    "(face|melvin)" : "rhel6_slave",
    "s968061"       : "jim_mac_laptop"
}

ALBANY_BUILD_TYPES = \
{
    "basic" : [
    ],
    "landice" : [
        ("ALBANY_LANDICE", "ON"),
    ],
    "cism" : [
        "felix",
        ("ALBANY_CISM_INTERFACE", "OFF"),
    ],
    "mpas" : [
        "landice",
        ("ALBANY_MPAS_INTERFACE", "OFF"),
    ],
    "performance" : [
        ("ALBANY_PERFORMANCE_TESTS", "ON"),
    ],
    "complete" : [
        "landice",
        "performance"
    ],
    "irina-full" : [
        "complete",
        "mpas",

        ("TRILINOS_TRIKOTA",  "OFF"),
        ("ALBANY_PERFORMANCE_TESTS",  "OFF"),

        ("ALBANY_64BIT_INT", "ON"),
        ("TRILINOS_PHALANX_TEUCHOS_TIME_MONITOR", "ON"),
        ("TRILINOS_STOKHOS_TEUCHOS_TIME_MONITOR", "ON"),
        ("TRILINOS_STRATIMIKOS_TEUCHOS_TIME_MONITOR", "ON"),
        ("TRILINOS_SUPERLU", "ON"),
        ("TRILINOS_PARMETIS", "ON"),
        ("TRILINOS_YAML", "ON"),
        ("TRILINOS_BLAS", "ON"),
        ("TRILINOS_DIDASKO", "ON"),
        ("TRILINOS_GALERI", "ON"),
        ("TRILINOS_GLOBIPACK", "ON"),
        ("TRILINOS_ISORROPIA", "ON"),
        ("TRILINOS_OPTIPACK", "ON"),
        ("TRILINOS_RBGEN", "ON"),
        ("TRILINOS_THREADPOOL", "ON"),
        ("TRILINOS_COUPLINGS", "ON"),
        ("TRILINOS_ZOLTAN2_EXPERIMENTAL", "ON"),
    ],
    "muelu_slu" : [
        ("TRILINOS_MUELU",   "ON"),
        ("TRILINOS_SUPERLU", "ON"),
    ],
    "muelu_klu" : [
        ("TRILINOS_MUELU", "ON"),
        ("TRILINOS_AMESOS_KLU2",  "ON"),
    ],
}

JENKINS_ENVS = \
[
    ("TRILDIR",        "$WORKSPACE/Trilinos"),
    ("TRILBUILDDIR",   "$TRILDIR/build"),
    ("TRILINSTALLDIR", "$TRILBUILDDIR/install"),
    ("ALBDIR",         "$WORKSPACE/Albany"),
    ("ALBBUILDDIR",    "$ALBDIR/build"),
    ("TRILOUTDIR",     "$WORKSPACE/Trilinos_out"),
    ("ALBOUTDIR",      "$WORKSPACE/Albany_out"),
]

ALBANY_BUILD_MODES = \
{
    "release" : [
        ("ALBANY_BUILD_MODE",   "RELEASE"),
        ("TRILINOS_BUILD_MODE", "RELEASE")
    ],
    "debug"   : [
        ("ALBANY_BUILD_MODE",          "DEBUG"),
        ("TRILINOS_BUILD_MODE",        "DEBUG"),
        ("TRILINOS_BUILD_SHARED_LIBS", "ON"),
        ("ALBANY_CXX_FLAGS",           "-ggdb"),
        ("TRILINOS_CXX_FLAGS",         "-ggdb")
    ]
}

COMPILERS = [
    "gcc",
    "intel",
    "clang",
    "pgi"
]

###############################################################################
def expect(condition, error_msg):
###############################################################################
    if (not condition):
        raise SystemExit(error_msg)

###############################################################################
def warning(msg):
###############################################################################
    print >> sys.stderr, "WARNING:", msg

###############################################################################
def parse_command_line(args, description):
###############################################################################
    parser = argparse.ArgumentParser(
usage="""\n<WRAPPER> [-t <BUILD_TYPE> [-t <BUILD_TYPE>] ] [-m <BUILD_MODE>] [<OPTIONS>]

Examples assume <Albany>/tools/build_tools is in your PATH

\033[1mEXAMPLE:\033[0m
  > cd <Trilinos>/build
  > source <Albany>/tools/env/<my-env-file>
  > build-trilinos -t lcm -m debug
  > make -j 4 install
  > export TRILINSTALLDIR=`pwd`/install
  > cd <Albany>/build
  > build-albany -t lcm -m debug
  > make -j 4

\033[1mEXAMPLE USING NON-STANDARD BUILD LOCATIONS:\033[0m
  > cd <Trilinos-build-dir>
  > source <Albany>/tools/env/<my-env-file>
  > export TRILDIR=<path-to-trilinos-src>
  > build-trilinos -t lcm -m debug
  > make -j 4 install
  > export TRILINSTALLDIR=`pwd`/install
  > cd <Albany-build-dir>
  > export ALBDIR=<path-to-albany-src>
  > build-albany -t lcm -m debug
  > make -j 4

\033[1mEXAMPLE LETTING HARNESS MANAGE ENV:\033[0m
  > cd <Trilinos>/build
  > build-trilinos -t lcm -m debug -e -c gcc
  > make -j 4 install
  > export TRILINSTALLDIR=`pwd`/install
  > cd <Albany>/build
  > build-albany -t lcm -m debug -e -c gcc
  > make -j 4

\033[1mEXAMPLE GENERATING LOCAL CMAKE FRAGMENTS:\033[0m
  > cd <Trilinos>/build
  > build-trilinos -t lcm -m debug -e -c gcc -g
  > cmake
  > make -j 4 install
  > export TRILINSTALLDIR=`pwd`/install
  > cd <Albany>/build
  > build-albany -t lcm -m debug -e -c gcc -g
  > cmake
  > make -j 4
""",

description=description,

formatter_class=argparse.RawTextHelpFormatter
)
    # Variables: Albany build type
    # Release or debug
    parser.add_argument("-t", action="append", choices=(ALBANY_BUILD_TYPES.keys()),
                        dest="build_types", default=[],
                        help="Choose build type, can do several at once. Default is basic.")

    parser.add_argument("-m", action="store", choices=("debug", "release"),
                        dest="build_mode", default="release", help="Choose build mode")

    parser.add_argument("-v", action="store_true", dest="verbose", default=False,
                        help="Print shell commands as they are executed")

    parser.add_argument("-e", action="store_true", dest="manage_environment", default=False,
                        help="Have harness manage your environment for you")

    parser.add_argument("-g", action="store_true", dest="generate_cmake", default=False,
                        help="Generate local cmake fragment and test scripts, do not run them")

    parser.add_argument("-c", action="store", dest="compiler", choices=COMPILERS, default=None,
                        help="Choose compiler. Only works with -e")

    parser.add_argument("mode", nargs="?", action="store", choices=("tril", "alb", "jenkins"),
                        default="jenkins", help="INTERNAL USE ONLY")

    args = parser.parse_args(args[1:])

    global VERBOSE
    VERBOSE = args.verbose

    expect(args.compiler is None or args.manage_environment,
           "Cannot use -c without also using -e")

    if (args.build_types == []):
        args.build_types = ["basic"]

    return args.mode, args.build_types, args.build_mode, \
        args.manage_environment, args.generate_cmake, args.compiler

###############################################################################
def run_cmd(command, arg_stdout=None):
###############################################################################
    if (VERBOSE):
        print command

    proc = Popen(command, shell=True, stdout=arg_stdout)
    output, _ = proc.communicate()
    status = proc.wait()

    expect(status == 0, "Failed")

    return output

###############################################################################
def set_env_for_build(build_keys, env_map):
###############################################################################
    for build_key in build_keys:
        env_settings = env_map[build_key]

        for item in env_settings:
            if (type(item) is str):
                set_env_for_build([item], env_map)
            else:
                env_var, env_setting = item
                if (env_var in os.environ and os.environ[env_var] != env_setting):
                    expect(False,
                           "Conflicting build modes: '%s' tried to set env '%s' to '%s' but already had '%s" %
                           (build_key, env_var, env_setting, os.environ[env_var]))
                os.environ[env_var] = env_setting

###############################################################################
def get_machine_type():
###############################################################################
    nodename = socket.gethostname().split(".")[0]
    for regex_str, machinetype in MACHINE_NODENAME_MAP.iteritems():
        regex = re.compile(regex_str)
        if (regex.match(nodename)):
            return machinetype

    expect(False, "Unrecognized machine '%s'" % nodename)
    return None

###############################################################################
def set_jenkins_env(generate=False):
###############################################################################
    expect("WORKSPACE" in os.environ,
           "You're in jenkins mode and WORKSPACE not set, did you mean to run build_albany or build_trilinos?")

    if (generate):
        fd = open("jenkins_env_setup", "w")

    for env_var, env_setting in JENKINS_ENVS:
        # Set env after dereferencing vars
        components = [os.environ[item[1:]] if item.startswith('$') else item for item in env_setting.split("/")]
        env_value = "/".join(components)

        if (generate):
            fd.write("export %s=%s\n" % (env_var, env_value))

        os.environ[env_var] = env_value

        if (env_var in ["ALBDIR", "TRILDIR"]):
            expect(os.path.isdir(env_value), "Value of '%s', '%s', not a valid directory" % (env_var, env_value))

    if (generate):
        fd.close()
        print "Created Jenkins env setup file: jenkins_env_setup"

###############################################################################
def generate_cmake_fragment(generic_fragment_path, env_cmd, build_types, build_mode, compiler):
###############################################################################
    # Read in generic_fragment_path
    generic_fragment = open(generic_fragment_path, 'r').read()

    # Put echo infront of cmake
    generic_fragment_echo = generic_fragment.replace("\ncmake ", "\necho cmake ")

    # Run cmake echo, capture output
    cmake_cmd = run_cmd("%s && %s" % (env_cmd, generic_fragment_echo), PIPE)

    # Compute file name
    generic_base = os.path.basename(generic_fragment_path)
    extension = generate_frag_extension(build_types, build_mode, compiler)
    frag_name = "%s-%s" % (generic_base, extension)

    # Be aware of potential file name conflicts for local fragment we want
    # to create
    renames = []
    old_frag_name = frag_name
    while (os.path.exists(old_frag_name)):
        warning("File '%s' exists, adding '.old' to this file\'s name" % old_frag_name)
        renames.insert( 0, (old_frag_name, "%s.old" % old_frag_name) )
        old_frag_name = "%s.old" % old_frag_name

    for old_name, new_name in renames:
        assert( not os.path.exists(new_name) )
        os.rename(old_name, new_name)

    assert( not os.path.exists(frag_name) )

    # Create local fragment
    local_frag = open(frag_name, "w")
    local_frag.write("#!/bin/bash -xe\n\n")
    local_frag.write("/bin/rm -f CMakeCache.txt\n\n")

    if ("ATH_COMPILER" in os.environ):
        local_frag.write("export ATH_COMPILER=%s\n" % os.environ["ATH_COMPILER"])
    local_frag.write("%s\n\n" % env_cmd)

    space_not_after_dash_d = re.compile(r'([^-][^D]) ')
    local_frag.write(space_not_after_dash_d.sub('\\1 \\\n  ', cmake_cmd))

    local_frag.close()

    # Make file executable
    frag_st = os.stat(frag_name)
    os.chmod(frag_name, frag_st.st_mode | stat.S_IXUSR | stat.S_IXGRP | stat.S_IXOTH)

    print "Created CMake fragment:", frag_name

###############################################################################
def generate_frag_extension(build_types, build_mode, compiler):
###############################################################################
    return "%s%s%s" % ("-".join(sorted(build_types)), "-%s-" if compiler else "-", build_mode)

###############################################################################
def perform_test(mode, build_types, build_mode, manage_environment, gen_cmake, compiler):
###############################################################################
    set_env_for_build(build_types, ALBANY_BUILD_TYPES)
    set_env_for_build([build_mode], ALBANY_BUILD_MODES)

    exe_dir = os.path.dirname(__file__)

    if (manage_environment):
        if (compiler is not None):
            os.environ["ATH_COMPILER"] = compiler
        else:
            warning(
"""You elected to have harness manage your environment but did not
provide a compiler via the -c option. This is OK if your environment
is already configured for a certain compiler."""
)

        machine_type = get_machine_type()
        env_file_path = os.path.join(exe_dir, "env", "%s_env" % machine_type)
        expect(os.path.exists(env_file_path), "env file '%s' does not exist" % env_file_path)

        env_cmd = "source %s" % env_file_path
    else:
        env_cmd = ":"

    if (mode == "jenkins"):
        set_jenkins_env(gen_cmake)

        test_script = os.path.join(exe_dir, "test_scripts", "test-engine")
        if (gen_cmake):
            tril_fragment = os.path.join(exe_dir, "build_scripts", "cmake_fragments", "do-cmake-trilinos")
            generate_cmake_fragment(tril_fragment, env_cmd, build_types, build_mode, compiler)

            alb_fragment = os.path.join(exe_dir, "build_scripts", "cmake_fragments", "do-cmake-albany")
            generate_cmake_fragment(alb_fragment, env_cmd, build_types, build_mode, compiler)

            print "The necessary scripts have been created, to test, run:"
            print " > source jenkins_env_setup"
            print " # Set up compiler env"
            print " > %s" % tril_fragment
            print " > make -j N"
            print " > make install"
            print " > mv %s $ALBBUILDIR" % alb_fragment
            print " > cd $ALBBUILDDIR"
            print " > %s" % alb_fragment
            print " > make -j N"
            print " > make test"

        else:
            run_cmd("%s && %s" % (env_cmd, test_script))

    elif (mode == "tril"):
        tril_fragment = os.path.join(exe_dir, "build_scripts", "cmake_fragments", "do-cmake-trilinos")
        if (gen_cmake):
            generate_cmake_fragment(tril_fragment, env_cmd, build_types, build_mode, compiler)
        else:
            run_cmd("%s && %s" % (env_cmd, tril_fragment))

    elif (mode == "alb"):
        expect("TRILINSTALLDIR" in os.environ, "TRILINSTALLDIR must be set for albany mode")

        alb_fragment = os.path.join(exe_dir, "build_scripts", "cmake_fragments", "do-cmake-albany")
        if (gen_cmake):
            generate_cmake_fragment(alb_fragment, env_cmd, build_types, build_mode, compiler)
        else:
            run_cmd("%s && %s" % (env_cmd, alb_fragment))

    else:
        expect(False, "Unrecognized mode '%s'" % mode)

###############################################################################
def _main_func(description):
###############################################################################
    if ("--test" in sys.argv):
        doctest.testmod()
        return

    mode, build_types, build_mode, manage_environment, gen_cmake, compiler = \
        parse_command_line(sys.argv, description)

    perform_test(mode, build_types, build_mode, manage_environment, gen_cmake, compiler)

###############################################################################

if (__name__ == "__main__"):
    _main_func(__doc__)
