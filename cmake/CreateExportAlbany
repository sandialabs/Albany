#!/usr/bin/env python3

import sys, os, argparse, pathlib


###############################################################################
def parse_command_line(args, description):
###############################################################################
    parser = argparse.ArgumentParser()

    parser.add_argument ("--bin-dir", help="binary dir", default=None)
    parser.add_argument ("--install-lib-dir", help="albany install lib dir", default=None)
    parser.add_argument ("--cmake-generator", help="generator used by cmake", default=None)

    return parser.parse_args(args[1:])

###############################################################################
def get_link_line_ninja(bin_dir):
###############################################################################
    infile  = bin_dir / "build.ninja"

    with infile.open('r') as fd:
        break_in_two = False
        break_next = False
        for line_no,line in enumerate(fd):
            if break_next:
                break
            if break_in_two:
                break_next = True
            if 'build dummy/dummy: CXX_EXECUTABLE_LINKER' in line:
                break_in_two = True

    tokens = line.strip().split('=')
    if len(tokens)!=2:
        print(f"ERROR! Unexpected format of LINK_LIBRARIES line in build.ninja")
        print(f"link line: {line}")
        raise RuntimeError
    if tokens[0].strip() != "LINK_LIBRARIES":
        print(f"ERROR! Unexpected format of LINK_LIBRARIES line in build.ninja")
        raise RuntimeError
    return tokens[1].split()

###############################################################################
def get_link_line_make(bin_dir):
###############################################################################
    infile  = bin_dir / "dummy" / "CMakeFiles" / "dummy.dir" / "link.txt"

    with infile.open('r') as fd:
        line = fd.read().strip()
        items = line.split()
        index = items.index('dummy')
        items = items[index+1:]

    return items

###############################################################################
def parse_link_line(items,install_lib_dir,bin_dir,make_dir):
###############################################################################
    libs = []
    libs_dirs = [install_lib_dir]
    for item in items:
        if "," in item:
            # This are link options, so process them one by one
            tokens = item.split(',')
            for i,t in enumerate(tokens):
                if ':' in t:
                  paths = t.split(':')
                  # Loop over all paths, replace them with install dir
                  for j,p in enumerate(paths):
                    path = pathlib.Path(p).resolve()
                    paths[j] = str(install_lib_dir)

                  # Replace the rpath list with the unique list
                  tokens[i] = ':'.join(list(set(paths)))
                else:
                  # Just a link flag, keep it
                  tokens[i] = t

            # Re-join proecessed tokens with commas
            libs.append(",".join(tokens))
        elif item.startswith("-l"):
            # It's either a -lXYZ lib or a link flag. Keep it as is.
            libs.append(item)
        else:
            # We want to get an abs path, with symlinks resolved *except* for symlinks
            # in the file name, to avoid an error we're seeing where libdl.so points
            # to the file libdl-2.28.so (an odd name: usually we see libdl.so.2.28)
            lib_file_full = pathlib.Path(item).parent.resolve() / pathlib.Path(item).name
            if not lib_file_full.exists():
                print (f"could not locate lib: {lib_file_full}")
                print (f"cwd: {os.getcwd()}")
                raise ValueError
            lib_file      = lib_file_full.name
            lib_path      = lib_file_full.parent
            # Remove all extensions (such as .so.5), and remove first 3 chars (lib)
            lib_name = str(lib_file).split('.')[0][3:]
            libs.append (f"-l{lib_name}")
            if not lib_path in libs_dirs and not str(lib_path).startswith(str(bin_dir)):
                libs_dirs.append(lib_path)

    return libs_dirs, libs

###############################################################################
def run (bin_dir,install_lib_dir, cmake_generator):
###############################################################################

    if cmake_generator=="Unix Makefiles":
        items = get_link_line_make (bin_dir)
    elif cmake_generator=="Ninja":
        items = get_link_line_ninja (bin_dir)
    else:
        print(f"ERROR! Unknown/unsupported cmake generator '{cmake_generator}'")
        raise RuntimeError

    libs = []
    libs_dirs = [install_lib_dir]

    for item in items:
        if "," in item:
            # This are link options, so process them one by one
            tokens = item.split(',')
            for i,t in enumerate(tokens):
                if ':' in t:
                  paths = t.split(':')
                  # Loop over all paths, replace them with install dir
                  for j,p in enumerate(paths):
                    path = pathlib.Path(p).resolve()
                    paths[j] = str(install_lib_dir)

                  # Replace the rpath list with the unique list
                  tokens[i] = ':'.join(list(set(paths)))
                else:
                  # Just a link flag, keep it
                  tokens[i] = t

            # Re-join proecessed tokens with commas
            libs.append(",".join(tokens))
        elif item.startswith("-l"):
            # It's either a -lXYZ lib or a link flag. Keep it as is.
            libs.append(item)
        elif item.startswith("-L"):
            # We want to get an abs path, with symlinks resolved (if any)
            lib_dir_full = pathlib.Path(item[2:]).resolve()
            if not lib_dir_full.exists() or not lib_dir_full.is_dir():
                print (f"could not parse token {item}")
                print (f" -> It appears to be a lib dir entry, but the path does not exist, or is not a directory")
                raise ValueError
            libs_dirs.append(lib_dir_full)
        else:
            # This should be a library name, expressed by full/relative path.
            # We want to get an abs path, with symlinks resolved *except* for symlinks
            # in the file name, to avoid an error we're seeing where libdl.so points
            # to the file libdl-2.28.so (an odd name: usually we see libdl.so.2.28)
            lib_file_full = pathlib.Path(item).parent.resolve() / pathlib.Path(item).name
            if not lib_file_full.exists():
                print (f"could not locate lib: {lib_file_full}")
                print (f"cwd: {os.getcwd()}")
                raise ValueError
            lib_file      = lib_file_full.name
            lib_path      = lib_file_full.parent
            # Remove all extensions (such as .so.5), and remove first 3 chars (lib)
            lib_name = str(lib_file).split('.')[0][3:]
            libs.append (f"-l{lib_name}")
            if not lib_path in libs_dirs and not str(lib_path).startswith(str(bin_dir)):
                libs_dirs.append(lib_path)
                
    outfile = pathlib.Path(bin_dir) / "export_albany.in"

    link_line = ""
    for dir in libs_dirs:
        link_line += f"-L{dir} "

    for lib in libs:
        link_line += f"{lib} "

    with outfile.open('w') as fd:
        fd.write(f'ALBANY_LINK_LIBS="{link_line.strip()}"')

###############################################################################
def _main_func(description):
###############################################################################
    args = vars(parse_command_line(sys.argv, description))

    bin_dir = pathlib.Path(args["bin_dir"]).resolve()
    install_lib_dir = pathlib.Path(args["install_lib_dir"]).resolve()
    generator = args["cmake_generator"]
    run (bin_dir,install_lib_dir,generator)
        
    sys.exit(0)

###############################################################################

if (__name__ == "__main__"):
    _main_func(__doc__)

